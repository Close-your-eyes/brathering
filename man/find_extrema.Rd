% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_extrema.R
\name{find_extrema}
\alias{find_extrema}
\title{Find extrema by numerical procedure}
\usage{
find_extrema(
  x,
  min_gap = NULL,
  threshold = max(x)/10,
  type = c("max", "min"),
  min_mono_width = NULL,
  windowsizes = NULL,
  stepsize = NULL,
  strictly_mono = TRUE,
  type2 = "global_fallback",
  smooth = F,
  verbose = TRUE
)
}
\arguments{
\item{x}{numeric vector}

\item{min_gap}{minimum number of indices of x to call two separate
extrema, min_gap>windowsize makes no sense}

\item{threshold}{min or max x value for calling an extreme, depending on type}

\item{type}{find maxima or minima}

\item{min_mono_width}{minimum number of (strictly) monotonous indices
left and right of window, either a vector of length 2 for different
left and right or one value for both}

\item{windowsizes}{windowsize(s) used for iteration over x. when there is a
plateau of n extreme values, a windowsize of min n is required to detect them
as extrema; for very sharp peaks with steep slopes, an appropriate
windowsize is smaller as for wider peaks.}

\item{stepsize}{step width to shift windows at; intended to speed the thing
up for very long x}

\item{strictly_mono}{should slopes left and right of window of width
min_mono_width be strictly monotonous? forced to TRUE for now.}

\item{type2}{any one or multiple of "global_fallback", "local", "global";
global_fallback means that if no local extrema were found a global extreme
is returned in any case}
}
\value{
data frame with extrema
}
\description{
A number of parameters are needed to finetune extrema detection to the
desired needs. See examples. To make this completely unsupervised and
automatically meet your interpretation of what is a valid local maximum
may not be possible. Selecting a proper windowsize is crucial. The function
works with indices of x (no continuous xy-pairs). With respect to min_gap this
assumes that x values are roughly equally spaced (in case x came from
xy-paired values)
}
\details{
See gcplyr::find_local_extrema or pracma::findpeaks.
}
\examples{
library(brathering)
x <- c(1,2,3,4,5,4,3,2,1,1,1,1,2,3,4,5,5,5,4,3,2,1,1,1,1,1,2,3,4,5,4,5,4,3,2,1,1,1,2,3,4,3,2,1,1,1,2,3,4,5,6,6,3,2,1,1,1,5,4,1)
# not every peak detected due to windowsize
res <- find_extrema(x = x, min_gap = 0, threshold = -Inf,
                    min_mono_width = 1,windowsizes = c(1))
plot2(res, color = "extrm", cex = 10, legend = NULL)
# now all peaks but also neighbouring maxima
res <- find_extrema(x = x, min_gap = 0, threshold = -Inf,
                    min_mono_width = 1,windowsizes = c(1,3))
plot2(res, color = "extrm", cex = 10, legend = NULL)
# use min_gap to filter consecutive extrema
res <- find_extrema(x = x, min_gap = 1, threshold = -Inf,
                    min_mono_width = 1,windowsizes = c(1,3))
plot2(res, color = "extrm", cex = 10, legend = NULL)
res <- find_extrema(x = x, min_gap = 2, threshold = -Inf,
                    min_mono_width = 1,windowsizes = c(1,3))
plot2(res, color = "extrm", cex = 10, legend = NULL)
# set a min x value: threshold
res <- find_extrema(x = x, min_gap = 1, threshold = 5,
                    min_mono_width = 1,windowsizes = c(1,3))
plot2(res, color = "extrm", cex = 10, legend = NULL)
# minimum steps of monotony to call an extreme
res <- find_extrema(x = x, min_gap = 1, threshold = -Inf,
                    min_mono_width = 4,windowsizes = c(1,3))
plot2(res, color = "extrm", cex = 10, legend = NULL)
# different mono left an right
res <- find_extrema(x = x, min_gap = 1, threshold = -Inf,
                    min_mono_width = c(4,1), windowsizes = c(1,3))
plot2(res, color = "extrm", cex = 10, legend = NULL)
# global only
res <- find_extrema(x = x, min_gap = 0, threshold = -Inf,
                    type2 = "global")
plot2(res, color = "extrm", cex = 10, legend = NULL)
# threshold only applies to local extrema
res <- find_extrema(x = x, min_gap = 0, threshold = 7,
                    type2 = "global")
plot2(res, color = "extrm", cex = 10, legend = NULL)
# NULL returned when nothing was found based on parameters
res <- find_extrema(x = x, min_gap = 0, threshold = 7,
                    type2 = "local")
plot2(res, color = "extrm", cex = 10, legend = NULL)
# minima
res <- find_extrema(x = x, type = "min", windowsizes = 4, min_gap = 0)
plot2(res, color = "extrm", cex = 10, legend = NULL)
# add more values
x2 <- interpolate_vec(x, 600)
res <- find_extrema(x = x2,
                    min_gap = 0,
                    threshold = -Inf,
                    min_mono_width = 1,
                    windowsizes = c(1))
plot2(res, color = "extrm", cex = 10, legend = NULL)
}
