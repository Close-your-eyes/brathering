% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_peaks.R
\name{find_peaks}
\alias{find_peaks}
\title{Find extrema or peaks in a time series by numerical procedure}
\usage{
find_peaks(
  x,
  min_gap = NULL,
  threshold = max(x)/10,
  type = c("max", "min"),
  min_mono_width = NULL,
  windowsizes = NULL,
  stepsize = NULL,
  strictly_mono = TRUE,
  type2 = "global_fallback",
  smooth = FALSE,
  verbose = TRUE
)
}
\arguments{
\item{x}{numeric vector}

\item{min_gap}{minimum number of indices of x to call two separate
extrema, min_gap>windowsize makes no sense. If NULL, defaults to
max(ceiling(length(x)/40), ceiling(min(wid)/5)) where wid is the width of
peaks as quantified by FWHM.}

\item{threshold}{min or max x value for calling an extreme, depending on type}

\item{type}{find maxima or minima}

\item{min_mono_width}{minimum number of (strictly) monotonous indices
left and right of window, either a vector of length 2 for different
left and right or one value for both; If NULL, defaults to 3 if data
appears smoothed or 1 if it does not.}

\item{windowsizes}{windowsize(s) used for iteration over x. when there is a
plateau of n extreme values, a windowsize of min n is required to detect them
as extrema; for very sharp peaks with steep slopes, an appropriate
windowsize is smaller as for wider peaks. If NULL, it is determined by
peak widths which in turned are qunatified by full width at half maximum
(FWHM).}

\item{stepsize}{step width to shift windows at; intended to speed the thing
up for very long x. If NULL, defaults to ceiling(windowsizes/10)}

\item{strictly_mono}{should slopes left and right of window of width
min_mono_width be strictly monotonous? forced to TRUE for now.}

\item{type2}{any one or multiple of "global_fallback", "local", "global";
global_fallback means that if no local extrema were found a global extreme
is returned in any case}

\item{smooth}{have x smoothed with stats::loess or stats::smooth.spline if
the initial fails}

\item{verbose}{write messages?}
}
\value{
data frame with extrema
}
\description{
A number of parameters are needed to finetune extrema/peak detection to the
desired needs. See examples. To make this completely unsupervised and
automatically meet your interpretation of what is a valid local maximum
is not possible. Selecting a proper windowsize is crucial. The function
works with indices of x (no continuous xy-pairs). With respect to min_gap this
assumes that x values are roughly equally spaced (in case x came from
xy-paired values).
}
\details{
See gcplyr::find_local_extrema or pracma::findpeaks. Also,
brathering:::estimate_peak_position may be a quicker alternative for simple
parabolic peaks.
}
