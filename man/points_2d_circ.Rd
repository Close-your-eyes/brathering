% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/points_2d_circ.R
\name{points_2d_circ}
\alias{points_2d_circ}
\title{Evenly arrange n points in 2D space in circular shape}
\usage{
points_2d_circ(
  n,
  n_ring = NULL,
  per_ring = NULL,
  per_ring_algo = c("same_n", "same_dist", "random1", "random2"),
  ring1 = NULL,
  n_incr = NULL,
  r_inner = 0.2,
  r_incr = 0.2,
  center_x = 0,
  center_y = 0,
  return_polars = FALSE
)
}
\arguments{
\item{n}{number of points}

\item{n_ring}{number of rings for arrangement}

\item{per_ring}{number of points per ring; sum must equal n}

\item{per_ring_algo}{how to fill rings? same_n: close equal number of points
per ring, same_dist: equally spaced points taking into account circumfences,
or one of two random procedures.}

\item{ring1}{number of points on first ring}

\item{n_incr}{increase of point per ring}

\item{r_inner}{radius of first ring}

\item{r_incr}{radius increment per ring}

\item{center_x}{shift center in x-direction}

\item{center_y}{shift center in y-direction}

\item{return_polars}{also return radius and angle (polar coordinates),
next to cartesian coordinates}
}
\value{
matrix with 2 or 4 columns (cartesian without or with polar
coordinates)
}
\description{
May be used to add an ordered jitter to overlapping points.
n must be provided. Then, there are four ways to run this: (i) provide ring1
and n_incr or (ii) define per_ring explicitly as a vector or (iii) define
n_ring and have an algorithm (per_ring_algo) fill the rings or (iv) not even
define n_ring to have it chosen by a formula: max(1, floor(sqrt(n)/2)).
}
\examples{
# number of rings and points per ring are set by own heuristic
plot(points_2d_circ(100))
# set number of rings
plot(points_2d_circ(100, n_ring = 1))
plot(points_2d_circ(100, n_ring = 10))
# set number of points per ring; sum must equal n
plot(points_2d_circ(100, per_ring = c(5,20,40,35)))
# only define points for first ring; n_ring is ignored then
plot(points_2d_circ(100, ring1 = 50, n_ring = 6))
# but increment per ring can be adjusted
plot(points_2d_circ(100, ring1 = 2, n_incr = 40))
plot(points_2d_circ(100, center_x = 5)) # shift center
# ... and decrease radius increment
points(points_2d_circ(50, center_x = 5, r_incr = 0.15),
       col = "red")
# 3rd column: radius, 4th column: angle in radiants
points_2d_circ(100, return_polars = TRUE)
}
